










/**************/
final public function buy(int $id, Request $request)
    {
        /**
         * 1. Obtener los productos seleccionados del formulario
         */
        $products = $request->input('products');
        if (is_string($products)) {
            $products = json_decode($products, true, 512, JSON_THROW_ON_ERROR);
        }
        /**
         * 2. Obtener el cliente correspondiente al ID proporcionado
         */
        $customer = Customer::find($id);
        foreach ($products as  $product) {


            /**
             * 1. Crear una nueva instancia de la clase Purchase
             * 2. Asignar el ID del cliente
             * 3. Asignar el ID del de la tabla pivot company_product
             * 4. Guardar la compra en la base de datos
             */
            /*
            $purchase = new Purchase(); // 1)
            $purchase->setCustomerId($id); // 2)
            $purchase->setCompanyProductId($productId); // 3)
            $purchase->save(); // 4)
            */

            /**
             * 1. Crear una nueva instancia de la clase Purchase
             */
            $purchase = new Purchase();
            /**
             * 2. Asignar el ID del cliente y el ID del producto
             */
           // dd($product);

            $companyProductId = (int)Arr::get($product, 'id');

            $price = (float)Arr::get($product, 'price');
            $quantity = (int)Arr::get($product, 'quantity');
            $total = (float)Arr::get($product, 'total');
            $purchase->setCompanyProductId($companyProductId);
            $purchase->setUnitPrice($price);
            $purchase->setQuantity($quantity);
            $purchase->setTotal($total);

            /**
             * 3. Guardar la compra en la base de datos
             * 4. Relacionar la compra con el cliente
             */
            $customer->purchases()->save($purchase);

        }
        return redirect()
            ->back()
            ->with('status', 'Compra registrada correctamente.');

    }
